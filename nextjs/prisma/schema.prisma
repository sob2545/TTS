// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserCourseProgress {
  id                 String   @id @default(cuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  courseId           String
  course             Course   @relation(fields: [courseId], references: [id])
  lastChapterNumber  Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  chapterProgresses  ChapterProgress[]

  @@unique([userId, courseId])
}

model ChapterProgress {
  id                 String   @id @default(cuid())
  userCourseProgressId String
  userCourseProgress UserCourseProgress @relation(fields: [userCourseProgressId], references: [id])
  chapterNumber      Int
  repeatCount        Int      @default(0)
  completed          Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@unique([userCourseProgressId, chapterNumber])
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  videoId     String?
  playlistId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  chapters    Chapter[]
  userCourseProgresses UserCourseProgress[]
}

model Chapter {
  id            String   @id @default(cuid())
  courseId      String
  course        Course   @relation(fields: [courseId], references: [id])
  chapterNumber Int
  videoId       String?
  startTime     Int
  sentence      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([courseId, chapterNumber])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  courseProgresses UserCourseProgress[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}